// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health-check": {
            "get": {
                "description": "Health Check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/internal/scheduler/get-active-jobs": {
            "get": {
                "description": "Get active scheduler jobs by scheduler group name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler",
                    "internal"
                ],
                "summary": "Get active scheduler jobs by scheduler group name",
                "operationId": "get-active-scheduler-jobs-by-scheduler-group-name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "scheduler group name",
                        "name": "groupName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetActiveSchedulerJobsRsp"
                        }
                    }
                }
            }
        },
        "/internal/users/login-da": {
            "post": {
                "description": "Login DA",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login DA",
                "operationId": "login-da",
                "parameters": [
                    {
                        "description": "input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dahelper.DALoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dahelper.DALoginResponse"
                        }
                    }
                }
            }
        },
        "/qrcode/process": {
            "post": {
                "description": "Process qr code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "qrcode"
                ],
                "summary": "Process qr code",
                "operationId": "process-qr-code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": " Proces qr code input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProcessQrCodeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessQrCodeRsq"
                        }
                    }
                }
            }
        },
        "/spaces/get-all": {
            "get": {
                "description": "Get all spaces",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "space"
                ],
                "summary": "Get all spaces",
                "operationId": "get-all-spaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetSpacesRsp"
                        }
                    }
                }
            }
        },
        "/spaces/get-by-id": {
            "post": {
                "description": "Get space by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get space by ID",
                "operationId": "get-space-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.GetSpaceByIdReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetSpaceRsp"
                        }
                    }
                }
            }
        },
        "/spaces/get-by-names": {
            "post": {
                "description": "Get spaces by names",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get spaces by names",
                "operationId": "get-spaces-by-names",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.GetSpacesByNamesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetSpacesRsp"
                        }
                    }
                }
            }
        },
        "/spaces/get-user-spaces": {
            "get": {
                "description": "Get spaces a user has access to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "space"
                ],
                "summary": "Get spaces a user has access to",
                "operationId": "get-user-spaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetSpacesRsp"
                        }
                    }
                }
            }
        },
        "/spaces/has-access": {
            "post": {
                "description": "Check is a user has access to a space",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "space"
                ],
                "summary": "Check is a user has access to a space",
                "operationId": "has-access",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Has access input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.HasAccessReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.HasAccessRsp"
                        }
                    }
                }
            }
        },
        "/spaces/has-access-by-space-name": {
            "post": {
                "description": "Check is a user has access to a space by space name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "space"
                ],
                "summary": "Check is a user has access to a space by space name",
                "operationId": "has-access-by-space-name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Has access input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.HasAccessBySpaceNameReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.HasAccessRsp"
                        }
                    }
                }
            }
        },
        "/user-roles/get-all": {
            "get": {
                "description": "Get all user roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userrole"
                ],
                "summary": "Get all user roles",
                "operationId": "get-all-user-roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetAllUserRoleRsp"
                        }
                    }
                }
            }
        },
        "/user-roles/update": {
            "post": {
                "description": "Update user roles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userrole"
                ],
                "summary": "Update user roles",
                "operationId": "update-user-role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Update user roles input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRoleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRoleRsp"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get user information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user information",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetUserInfoRsp"
                        }
                    }
                }
            }
        },
        "/users/has-tag": {
            "post": {
                "description": "Check if a user has a tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check if a user has a tag",
                "operationId": "check-if-a-user-has-a-tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token passed in Authorization in 'Bearer xxxx' format. The alternative is to pass 'token=xxxx' in cookie",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Has access input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CheckIfUserHasATagReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CheckIfUserHasATagRsp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dahelper.DACredential": {
            "type": "object",
            "properties": {
                "loginId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dahelper.DAJwtToken": {
            "type": "object",
            "properties": {
                "expiration": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                },
                "tokenType": {
                    "description": "refreshToken, accessToken",
                    "type": "string"
                }
            }
        },
        "dahelper.DALoginRequest": {
            "type": "object",
            "properties": {
                "credential": {
                    "$ref": "#/definitions/dahelper.DACredential"
                },
                "loginType": {
                    "type": "string"
                }
            }
        },
        "dahelper.DALoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dahelper.DAJwtToken"
                    }
                },
                "errorCode": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        },
        "model.CheckIfUserHasATagReq": {
            "type": "object",
            "properties": {
                "tagName": {
                    "type": "string"
                }
            }
        },
        "model.CheckIfUserHasATagRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "boolean"
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.GetActiveSchedulerJobsRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SchedulerJob"
                    }
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.GetAllUserRoleRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserRole"
                    }
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.GetSpaceByIdReq": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "type": "string"
                }
            }
        },
        "model.GetSpaceRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.Space"
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.GetSpacesByNamesReq": {
            "type": "object",
            "properties": {
                "spaceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.GetSpacesRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Space"
                    }
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.GetUserInfoRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.HasAccessBySpaceNameReq": {
            "type": "object",
            "properties": {
                "spaceName": {
                    "type": "string"
                }
            }
        },
        "model.HasAccessReq": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "type": "string"
                }
            }
        },
        "model.HasAccessRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "boolean"
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.ProcessQrCodeReq": {
            "type": "object",
            "properties": {
                "c": {
                    "type": "string"
                },
                "n": {
                    "type": "string"
                }
            }
        },
        "model.ProcessQrCodeRsq": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "It varies because of different actions"
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.SchedulerJob": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schedulerDefinition": {
                    "type": "string"
                },
                "schedulerType": {
                    "type": "string"
                }
            }
        },
        "model.Space": {
            "type": "object",
            "properties": {
                "cosFolder": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayOrder": {
                    "type": "integer"
                },
                "entryPointType": {
                    "type": "string"
                },
                "entryPointUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.UpdateUserRoleReq": {
            "type": "object",
            "properties": {
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.UpdateUserRoleRsp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "boolean"
                },
                "errcode": {
                    "type": "integer"
                },
                "errmsg": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserRole"
                    }
                },
                "status": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserTag"
                    }
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.UserRole": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.UserTag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1/wegalaxy-foundation",
	Schemes:          []string{},
	Title:            "WeGalaxy Foundation Service",
	Description:      "WeGalaxy Foundation Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
